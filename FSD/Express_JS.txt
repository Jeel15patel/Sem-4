Epress is node js framework it like addstion module of node js.

Feature of Exp :- 
    Build Dynamic web
    Creat FSD 

Exp js is faster than node js

1 : app.listen(port,callback) 
2 : app.get("Pro_Name",Callback)

----------------------------------------------------
app.listen(9999,() => {
    console.log("Server is running on port 9999")
})

app.get("User_id",(req,res)=> {
    res.send("User_id")
})
-----------------------------------------------------

How to link HTML CSS JS

----------------------------------------------------

Method :- 
    1 => Express.static(folderName)
        :- To static file such as image , css , html 
        :- This work in Build-In function

    2 => app.use(FolderName.ststic)
        :- It open corr.. resource of file and use it

-----------------------------------------------------

Post Method :-
    Using port you can send larg amount of data

app.use(bodyParser.urlencodeed({extended:false}))

-----------------------------------------------------

WAP JSSC 
    1 :- Creat HTML file LJform.html
        :- Username , Password , Button , Data Send by POST 
            :- Button Black Color , White Text
    2 :- ON the home form shoud be display and whiile submit the form on next page login page if username is ADMINE then print WellCome admine 

-----------------------------------------------------

What is Middleware?
> Express JS is a routing and middleware framework for handling the different routing in webpage
  and it works between response and request cycle.
> It is executed after the server recieves the request and before the controller action sends the
  response.
> It has access to the request object, response object and next.
> It can process the request before the server sends the response.
> It can process request object multiple times before the server works for that request.
> It can be used to add login and authentication funcionality.
> It improves Client-side rendering performance, it hepls for optimizaiton and better performance.

-----------------------------------------------------

Cookies:-
> const cp = require('cookie-parser') -> Module for cookie.
> res.cookie("name","value","expiry") -> Creates a cookie.{e: new Date(Date.now+10000)}
> req.cookie -> To send and fetch a cookie, if you want a specific cookie, then we can retrive it
                by appending the name of cookie.
> res.clearCookie("cookie-name") -> Deletes a cookie.

-----------------------------------------------------

Session in JS:-
> Since http is a stateless protocol, to assosciate a request to any other request, you need
  a way to store user data, between http request.
> Cookies and url parameters are suitable way to transport data between client and server
  but they are readable on client side.
> Session solves this problem, using session we can assign the client an ID and it makes
  all further request using that id only.
session({
  reserve: False            #Doesn't save session if not modified
  saveUninitialized: False  #Dont Create session if something is not stored
  secret:"key"              #If the Secret key is changed, the session is considered as fresh session and its value will be reset
})

-----------------------------------------------------

UNIT 5 :-  